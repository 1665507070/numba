# -*- coding: utf-8 -*-

"""
Control flow blocks. These constitute the CFG, which is separate from the
AST or any code blocks in the AST (see cfnodes for that).
"""

from __future__ import print_function, division, absolute_import

import ast

from numba import error
from numba.control_flow import basicblocks

#----------------------------------------------------------------------------
# CFG basic blocks
#----------------------------------------------------------------------------

class ControlBlock(basicblocks.BasicBlock,
                   # TODO: Hack, needed to cooperate with AST visitors for now
                   ast.AST):
    """
    Control flow graph node. This contains a sequence of assignments and
    name references.

       stats     list of block statements
       gen       dict of assignments generated by this block
       bound     set  of entries that are definitely bounded in this block

       Example:

        a = 1
        b = a + c # 'c' is already bounded or exception here

        stats = [Assignment(a), NameReference(a), NameReference(c),
                     Assignment(b)]
        gen = {Entry(a): Assignment(a), Entry(b): Assignment(b)}
        bound = set([Entry(a), Entry(c)])
    """

    # TODO: We will move away from this towards a FunctionFlowGraph
    # with blocks with phi_nodes as leading statements
    _fields = ['phi_nodes', 'body']

    def __init__(self, id, label, pos):
        super(ControlBlock, self).__init__(id, label, pos)

        self.stats = []
        self.gen = {}
        self.bound = set()

        # Same as i_input/i_output but for reaching defs with sets
        self.input = set()
        self.output = set()

        self.i_input = 0
        self.i_output = 0
        self.i_gen = 0
        self.i_kill = 0
        self.i_state = 0

        # TODO: Make these bits
        # Set of blocks that dominate this block
        self.dominators = set()
        # Set of blocks where our dominance stops
        self.dominance_frontier = set()

        # SSA Î¦ locations. Maps Variables to a list of (basic_block, definition)
        # There can be only one reaching definition, since each variable is
        # assigned only once
        self.phis = {}
        self.phi_nodes = []

        # Localized symbol table
        self.symtab = None
